import numpy as np
from PIL import Image
import torch
import torch.nn as nn
from torch.utils.data import Dataset
import torch.nn.functional as F
from torchvision import datasets, transforms
from torchvision.transforms.functional import to_grayscale
from pycontourlet.pycontourlet4d.pycontourlet import batch_multi_channel_pdfbdec

def stack_same_dim(x):
    """Stack a list/dict of 4D tensors of same img dimension together."""
    # Collect tensor with same dimension into a dict of list
    output = {}
    
    # Input is list
    if isinstance(x, list):
        for i in range(len(x)):
            if isinstance(x[i], list):
                for j in range(len(x[i])):
                    shape = tuple(x[i][j].shape)
                    if shape in output.keys():
                        output[shape].append(x[i][j])
                    else:
                        output[shape] = [x[i][j]]
            else:
                shape = tuple(x[i].shape)
                if shape in output.keys():
                    output[shape].append(x[i])
                else:
                    output[shape] = [x[i]]
    else:
        for k in x.keys():
            shape = tuple(x[k].shape[2:4])
            if shape in output.keys():
                output[shape].append(x[k])
            else:
                output[shape] = [x[k]]
    
    # Concat the list of tensors into single tensor
    for k in output.keys():
        output[k] = torch.cat(output[k], dim=1)
        
    return output

class DoubleConv(nn.Module):
    """(convolution => [BN] => ReLU) * 2"""

    def __init__(self, in_channels, out_channels, mid_channels=None):
        super().__init__()
        if not mid_channels:
            mid_channels = out_channels
        self.double_conv = nn.Sequential(
            nn.Conv2d(in_channels, mid_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(mid_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(mid_channels, out_channels, kernel_size=3, padding=1),
            nn.BatchNorm2d(out_channels),
            nn.ReLU(inplace=True)
        )

    def forward(self, x):
        return self.double_conv(x)

class Down(nn.Module):
    """Downscaling with maxpool then double conv"""

    def __init__(self, in_channels, out_channels):
        super().__init__()
        self.maxpool_conv = nn.Sequential(
            nn.MaxPool2d(2),
            DoubleConv(in_channels, out_channels)
        )

    def forward(self, x):
        return self.maxpool_conv(x)

class Up(nn.Module):
    """Upscaling then double conv"""

    def __init__(self, in_channels, out_channels, bilinear=True):
        super().__init__()

        # if bilinear, use the normal convolutions to reduce the number of channels
        if bilinear:
            self.up = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
            self.conv = DoubleConv(in_channels, out_channels, in_channels // 2)
        else:
            self.up = nn.ConvTranspose2d(in_channels , in_channels // 2, kernel_size=2, stride=2)
            self.conv = DoubleConv(in_channels, out_channels)


    def forward(self, x1, x2):
        x1 = self.up(x1)
        # input is CHW
        diffY = x2.size()[2] - x1.size()[2]
        diffX = x2.size()[3] - x1.size()[3]

        x1 = F.pad(x1, [diffX // 2, diffX - diffX // 2,
                        diffY // 2, diffY - diffY // 2])
        # if you have padding issues, see
        # https://github.com/HaiyongJiang/U-Net-Pytorch-Unstructured-Buggy/commit/0e854509c2cea854e247a9c615f175f76fbb2e3a
        # https://github.com/xiaopeng-liao/Pytorch-UNet/commit/8ebac70e633bac59fc22bb5195e513d5832fb3bd
        x = torch.cat([x2, x1], dim=1)
        return self.conv(x)

class OutConv(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(OutConv, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)

    def forward(self, x):
        return self.conv(x)

class ContourletCNN(nn.Module):

    def __init__(self, num_classes, input_dim=(3, 224, 224), n_levs=[0, 3, 3, 3], bilinear=True):
        super(ContourletCNN, self).__init__()
        
        # Model hyperparameters
        self.num_classes = num_classes
        self.input_dim = input_dim
        self.n_levs = n_levs
        self.bilinear = bilinear
        self.device = torch.device("cuda:0")

        
        # Conv layers parameters
        down_conv_1 = 64
        down_conv_2 = 128
        down_conv_3 = 256
        down_conv_4 = 512
        down_conv_5 = 1024

        in_conv_2 = down_conv_1 + 2**n_levs[3] * input_dim[0]
        in_conv_3 = down_conv_2 + 2**n_levs[2] * input_dim[0]
        in_conv_4 = down_conv_3 + 2**n_levs[1] * input_dim[0]
        in_conv_5 = down_conv_4 + 4 * input_dim[0]
                
        # Conv layers
        self.inc = DoubleConv(input_dim[0], down_conv_1)
        self.maxpool = nn.MaxPool2d(2)
        self.conv1 = DoubleConv(in_conv_2,down_conv_2)
        self.conv2 = DoubleConv(in_conv_3,down_conv_3)
        self.conv3 = DoubleConv(in_conv_4, down_conv_4)
        factor = 2 if bilinear else 1
        self.conv4 = DoubleConv(in_conv_5, down_conv_5//factor)
        self.up1 = Up(1024, 512 // factor, bilinear)
        self.up2 = Up(512, 256 // factor, bilinear)
        self.up3 = Up(256, 128 // factor, bilinear)
        self.up4 = Up(128, 64, bilinear)
        self.outc = OutConv(64, num_classes)

    def __pdfbdec(self, x, method="resize"):
        """Pyramidal directional filter bank decomposition for a batch of
        images.

        Returns a list of 4D numpy array.

        Here's an example with an image with 3 channels, and batch_size=2:
            >>> self.n_levs = [0, 3, 3, 3]
            >>> coefs, sfs = self.__pdfbdec(x)
        This will yield:
            >>> coefs[0].shape
            (2, 24, 112, 112)
            >>> coefs[1].shape
            (2, 24, 56, 56)
            >>> coefs[2].shape
            (2, 24, 28, 28)
            >>> coefs[3].shape
            (2, 12, 14, 14)
            >>> sfs.shape
            (2, 168)
        """

        # Obtain coefficients
        coefs = batch_multi_channel_pdfbdec(x=x, pfilt="maxflat", dfilt="dmaxflat7", nlevs=[0, 3, 3, 3], device=self.device)

        # Stack channels with same image dimension
        coefs = stack_same_dim(coefs)

        # Resize or splice
        if method == "resize":
            for k in coefs.keys():
                # Resize if image is not square
                if k[2] != k[3]:
                    # Get maximum dimension (height or width)
                    max_dim = int(np.max((k[2], k[3])))
                    # Resize the channels
                    trans = transforms.Compose([transforms.Resize((max_dim, max_dim))])
                    coefs[k] = trans(coefs[k])
        else:
            for k in coefs.keys():
                # Resize if image is not square
                if k[2] != k[3]:
                    # Get minimum dimension (height or width)
                    min_dim = int(np.argmin((k[2], k[3]))) + 2
                    # Splice alternate channels (always even number of channels exist)
                    coefs[k] = torch.cat((coefs[k][:, ::2, :, :], coefs[k][:, 1::2, :, :]), dim=min_dim)

        # Stack channels with same image dimension
        coefs = stack_same_dim(coefs)

        # Change coefs's key to number (n-1 to 0), instead of dimension
        for i, k in enumerate(coefs.copy()):
            idx = len(coefs.keys()) - i - 1
            coefs[idx] = coefs.pop(k)

        # Get statistical features (mean and std) for each image
        sfs = []
        for k in coefs.keys():
            sfs.append(coefs[k].mean(dim=[2, 3]))
            sfs.append(coefs[k].std(dim=[2, 3]))
        sfs = torch.cat(sfs, dim=1)

        return coefs, sfs
        
    def forward(self, x):
        
        # Perform PDFB decomposition to obtain the coefficients and it's statistical features
        coefs, sfs = self.__pdfbdec(x, method="resize")
        
        # AlexNet backbone convolution layers
        x1 = self.inc(x)
        x_p1 = self.maxpool(x1)
        x2 = self.conv1(torch.cat((x_p1, coefs[0].to(self.device)), 1))
        x_p2 = self.maxpool(x2)
        x3 = self.conv2(torch.cat((x_p2, coefs[1].to(self.device)), 1))
        x_p3 = self.maxpool(x3)
        x4 = self.conv3(torch.cat((x_p3, coefs[2].to(self.device)), 1))
        x_p4 = self.maxpool(x4)
        x5 = self.conv4(torch.cat((x_p4, coefs[3].to(self.device)), 1))
        x = self.up1(x5, x4)
        x = self.up2(x, x3)
        x = self.up3(x, x2)
        x = self.up4(x, x1)
        logits = self.outc(x)
        return logits
